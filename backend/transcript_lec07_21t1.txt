good morning everyone how are we all
going
welcome to week four of com1511
big news uh big news this week our first
assignment has been released
so um there's something to think about
i'm out of focus hang on there you go
back in focus
all good um yeah so
if you haven't seen it yet it's on the
course website it's called slide
it's um vaguely based on the idea
of uh 1980s era
arcade shooters this one's kind of um
a bit like r-type if you know r-type
r-types like one of the kind of
i don't know if you'd call it the second
or third generation uh
shoot mops when they were horizontal so
um it's an interesting thing where we're
going to be using arrays to represent
a space and and
and something that can kind of shoot
into that space and stuff but
i'm not going to talk too much about the
assignment because i've dedicated an
entire um
optional but still a stream to a
tomorrow so if you're interested in
hearing more about the assignment
or even just asking questions about if
you started reading it so far
um tomorrow afternoon
roughly four to six p.m i mean we'll i
will i will cut it off at 6 p.m but if
if we run out of questions before then i
will stop before then but knowing me
uh i can talk for two hours with no
questions
so we'll hopefully get some information
out there my suggestions for something
large
like the assignment so it's what are we
thinking about like
three weeks um uh
three weeks worth of work i guess in
this assignment
um my suggestion would be
read the assignment specification now
even if you have no plans
on working on it because one of the nice
things about um
the human brain i guess is if you if you
just start even just start reading
things
um your your mind will start playing
around
with the um the ideas of how to solve
problems
and so when you eventually do get to it
it's already been stewing around in your
brain and just helping you
um get a bit of a feel for
for what it is you're going to do with
it when you get there
um the if people are looking for
the the live stream stuff
uh it's there will be a link
in the lecture section in the week four
of the lecture section so i think at the
moment i've only put up
today's lecture and then the thursday
live stream there's actually going to be
obviously there's going to be a friday
lecture as per normal i just haven't
actually put it on the website yet
um obviously assignment release week
gets a bit busy for us in the back end
as well so i haven't done
all of the prep necessary to get you
everything going
for that yet but anyway so we're ramping
up and stuff
to do um uh
to do a bit more work than we have been
in the lab so the assignment
has more things joined together than
just
um uh
than than just the lab exercises so
things lead into each other
and it's a bit more fun because by the
end of it you can get a larger project
put together so check it out when you
can the other thing
i should say is that um
don't worry if you don't understand it
all right now because there's content
this week that we're gonna teach
teach you that will help you understand
i mean even the basics of the assignment
you don't know yet because i haven't
taught you
how to expand arrays from this one
dimension into a second dimension
which is one of the things we're going
to talk about today let's go into the
slides
and we'll start getting to the lecture
itself so
a bit of a recap what we're looking at
last week so over the last week
we introduced i mean like we'd reach a
point i thought where you're writing
enough code that we could start talking
about
how how to start writing code that
doesn't confuse ourselves
because that's um that's one of the big
things
about programming is it's a language
that humans
can understand but it can be written in
a way that the computer still
understands but humans have a lot of
trouble with
and the more trouble trouble we make for
ourselves with our code
um the worse it's going to be for us to
actually fix our mistakes
or to be able to show someone else our
code and have them understand it
so we do need to put a conscious effort
into making our code human
understandable
and we looked at both code style and
code reviews as
techniques we can use to try to to keep
that going
in a sense we looked at functions as
well which was
how we were going to write a separate
piece of code that could be jumped into
run and then you jump back to where you
were running previously
so functions are very very useful for
that kind of thing
not only do they allow us to separate
code based on
what it is doing that allows us to call
the same code multiple times if we need
to
we also looked at arrays which was our
way of saying
instead of having individual variables
we can have variables in
collections and these collections are
put together
very very similarly to the way that
while loops
run so they're made for us to be able to
loop across the entire collection and
see everything in it
so that's going to be a very powerful
thing i mean people really get into the
idea of um
analyzing a lot of data and this is the
very very basic level of analyzing
a collection of data is to be able to
look at every element
inside an array so you think about like
you know it's huge at the moment
nowadays
talking about big data analysis and
stuff like that this isn't exactly the
same but i mean
it's really like the first step on the
way towards those kinds of things
okay so today today what we're doing is
basically we're doing an extension on
what we had started learning about um
functions and arrays so we're not
necessarily introducing
new content today but we're going to
expand both of these things
so we'll look back at functions a little
bit and
we're going to look at libraries so
we've actually been using these for a
while
but i haven't fully explained what they
are or how they work so we're going to
look at
what a library is in c and
how we can use functions that aren't
necessarily
written in our own files but might be
might be from other files so we've
actually seen this at the printf and
scanf we'll talk about that in a sec
we're also going to talk about um an
expansion on arrays
so it's really just kind of continuing
on these two things functions and arrays
but then
adding a little bit to both so
we get this idea that we can put an
array inside
another array and we'll i'll talk about
that more but
being able to put arrays inside arrays
allows us to build grids
and cubes and and if you really want to
you can go into more dimensions than
that if you want your brain to explode
but we're gonna we're gonna look at that
we're going to stick to two dimensions
we're not even gonna go to three
dimensional arrays in one five one one
i figure two-dimensional arrays is gonna
be hard enough as it is
um a lot that's in this lecture should
hopefully be quite helpful to people
because
um the 2d arrays form
a part of what's in the um in the first
assignment so
a lot of people i think will not be
starting the first assignment until
after
today's lecture which is totally fine by
the way
like we considered the assignment to be
kind of as it was released on monday
um was it monday it may have been
tuesday
because it was released really close to
midnight on monday anyway um
you could look at it then but a lot of
the stuff we're covering this week is
very very helpful for actually getting
it done
okay so a bit of a recap on functions
tom's like it was monday it was it was
only just and it was like 11 p.m or
something around it wasn't actually that
late on monday
2355 was it okay anyway recap of
functions so thinking about
just the basics of what a function is um
one of the subtleties that we're going
to get to with functions is deciding
when and how to use them
so my suggestion when you're starting
out with functions is just to use them
heaps
like just use them for like everything
until you get a nuance for like okay
this is where
it really makes sense to pull something
out of our main function
um we get a lot of the time where
the main function in a program is really
really short
so it's really short and really um
really small and all is this is a series
of function calls
and then all of the code is actually
pulled out of the main and put into
separate functions
so you know that everything's sort of
categorized by what it does
that is like this kind of holy grail of
programming with functions and we may be
able to get there with some of the
things that we're doing
in one five one one but we'll show you
as we go along i mean maybe i'll try to
do something like that today where it's
actually
really really function based um and the
main function is really easy to read
because it's just like
english words one after the other but
anyway
function it always has a name and that's
the name we use to call it when we want
it to run
it will have inputs and outputs as in
information that goes into the function
and information that comes back out of
the function we've got to keep these
separate from the idea
of printf and scanf so we consider those
being inputs and outputs to and from a
person the function's actually talking
to the rest of the program when we're
talking about its inputs and outputs
both of those are optional you can have
a function with no inputs you can have a
function with no outputs as well we
talked about the void
keyword when we were talking about that
last week
the return keyword now has kind of more
meaning than it did previously
when we only had one function and it was
the main function return was going to
end the function
return still ends whichever function
it's in
but now that we think about passing
information to and from functions we
know that the return keyword is
something that gives back
information to the rest of the program
so
basic idea of functions here i think
this is
potentially exactly the same example
that i use in the function lectures
so i'm going to main here and the main
gets at this point it calls the add
function the only reason it can
call the add function is that it knows
has been told previously what the inputs
and outputs for the add
are so when it gets here it goes oh i
know this thing
is an integer type function which means
its result can be stored in an integer
which is just a standard
equals variable assignment that we're
doing here
and we know that it takes in two
integers it's going to call them a and b
but we don't have to call them a and b
here so when we're giving information to
the function
we can give that information based on
the information that we have in our main
here and so we'll take number four here
number six here
and put them into this function so when
this runs it'll go looking through the
code
for um the actual definition that we
call
of the function here that um
will then do its own setup so it'll
start this line and it'll say okay i've
got an integer a and an integer b
and i've been given this first number
and second number so that i'm going to
set up these variables this is actually
like creation of these variables
where a will be created and initialized
with the value 4
b will be created and initialized with
the value 6.
a and b are not related to first number
and second number
they have the same values as them but
there's no
there's no connection between those two
other than the fact that the four and
the six from these were given to this
function so they're separate variables
and each one is within their own set of
curly brackets
we do some work in the function here and
often functions can be longer
usually functions are longer than one
line but when we finish doing the work
we'll give back
something so this return
gives back a plus b and in a sense
this return will be this integer which
will then replace
this function call here with whatever
number
was returned so in this case oops
clicked on a vaccine in this case it'll
be 10
and so this will be replaced by 10 total
will have 10 assigned to it right
so the the information going in and out
of the of the functions will
will work in that pattern right when we
reach the function
we will give information to the function
the function will create its own
variables based on that
and when the function returns it will
basically transform itself
into whatever variable type the function
was
and then it can be used in the main or
even in another function we can't have
functions calling functions
so i think um
someone just hopped up on the desk to
say hi
um i think we've talked a little bit
about this already but the
the nuance in using functions is knowing
why they exist
and what we're going to do with them so
one of the things that's really handy
with functions
is if we're going to um
use the same bit of code multiple times
it's much better to put in a function
and call the function multiple times
than it is to to copy paste the code
um the other thing about that is
if we had copy pasted code we'd be in a
situation
where um
anytime we wanted to make changes in the
code
we would have to um go through and find
every place we'd copy paste that code
and make changes to it the function
means there's only ever one place
that code is written so
that's one thing that makes functions
really really handy is you're just
writing less code
and there's less chance you're going to
have to make any changes or anything
like that
also means that your code is
categorized in a way so that
um if you've got stuff that's
doing a particular task you can just
give the name of the function
that task and then the complicated code
is kind of hidden away
so people only have to look at it if
they um
if they go really really deep into the
function itself
everybody's noticed the black pink
[Laughter]
t-shirt
um so
what this does sorry i'm getting thrown
off by the fact i'm wearing yes i am
wearing k-pop match
um this
allows us in a sense to both
put our code into little separate blocks
in a sense that we can use
as well as um control
exactly when our code is used and not
have to write as much
so functions are really useful like that
but in general
it is going to take a while for people
to
understand when and where to use
functions
so that's something that that it comes
down to for a while that
um you'll be writing code in your main
and you won't know whether
chunks of your main code could be put
into a function or not
the way i like to think about
these kinds of things is that
i um going to say that
the the functions you can nearly think
of is like in your head okay
do this task or do this other task
and stuff and when you think about a
task or something that you want your
program to do
you can actually separate your program
into functions that that cover
those actual tasks tasks so there's some
cool stuff like that that
you know it takes a while to get a
handle on but once you get there it's
pretty good
okay so i want to talk a bit about c
libraries
now we've actually been using one of the
c standard libraries heaps
and that's what we've been doing with
our includes in nearly every program
that we've been writing
as we've been using this one called
standard input output that
the studded io dot h library that we've
been using heaps
that is not the only library that c
comes packaged with
we don't necessarily use all the
libraries all the time and that's why we
use the hashing clue to just pick
a library out one at a time so
there are a few more i'm going to show
you a couple of them today but we're not
going to go
super deep into them yet later on you
will end up
going deep into them but um
the c libraries have a whole lot
of functions that are
what we consider to be the commonly used
functions
uh in c so standard input output has
stuff like printf and scanf that we're
going to be using
heaps and there are other ones like
math.h which has a whole bunch of
maths functions i think math.h is
uh well known as being the library that
has
like i think every function is not going
to be 100
on this but i think nearly every
function math.h is a double
function so it has all these
capabilities working with floating point
numbers
and things and then there's the standard
library.h
which we will get um we will get to the
point where we will start
including the standard library dot at
the dot h
in pretty much every program that we're
that we're doing
um it has a lot of just generically
useful functions we're actually going to
get into that more later
so if you need to you can actually look
up um
c references if anyone's been doing our
revision tests
so far which is just ways for you to
just sort of see where you're up to in
the course
i think we've only released one of them
which is the revision from the first few
weeks so
hopefully that one is easy because uh
it's only got
information from week one i think in it
um the
the revision tests have a cheat sheet
which has a basic
look at some of the um standard
libraries and how they work
there's also ways to look at references
there's actually a command
called man in linux it's not it's not
about a person
it's short for manuals and you can
actually type in man
and some of these c libraries and even
some c
functions and it will actually give you
information about them
you can also google these things so one
warning i should put in
is if you go looking into documentation
about c libraries
uh and stuff just be careful because
there's gonna be hundreds of functions
in these and heaps of them we don't know
about and heaps of them you don't even
have context
for what they even mean so don't worry
about it too much yet
um as as always you know like what have
we
we've only been doing this for three
weeks so
so strangely enough there's a lot of c
you don't know yet
and we'll get there eventually
so showing you some some libraries and
how we might use them
it is interesting to see that this line
here we already know about
we can hash include multiple files um
sorry chat's been moving pretty quickly
but i think that michael
is on top of that as far as i can see
yeah okay so any of the c standard
libraries
we can do a hash include to use them in
our code which means there's a lot of
freebies
in there that we could use i remember
when we were talking about
um which one was it the
dice checker the second dice checker we
were talking about
mods sometimes giving us a negative
result and things like that and us
ending up with the situation we have to
flip a negative number positive
and we did a little maths to make that
happen but you can actually do that with
this function here which is the absolute
value function
from memory it's funny because it's a
mathematical operator but
i think it's actually in the standard
library not in the math.h library
but the math.h library can do other
things like it has this function for
square root
because manually doing a square root is
like super annoying and quite difficult
to code
so it's really nice to have someone else
having done it for you and you just go
okay
square root this number and then we'll
store the result somewhere else
so in the same way that we've been using
things like printf and scanf
we can use other functions that are in
these standard libraries
so a lot of the time when you're looking
for
the capability to do something in c so
you say oh i would like to be able to do
a particular thing uh in c um
you you can actually google this and go
oh how do i do an absolute value in c
and then you'll probably get information
saying did you know that the standard
library has a function to do this
already and you go oh that's great
because then i don't have to write code
for it i can i can use the standard
library code and one of the nice things
about standard library code
is it's already been used by i don't
know i'm just ballpark numbers here like
100
hundreds of thousands of people have
already used these things
so you you kind of have a reasonable
um reliance on the fact that so many
people have tried and tested these
things in different
situations that it's unlikely to go
wrong for you
you can see i'm always really cagey
about this stuff i'm just like i'm never
gonna say
this will always 100 work because it's
still written by humans
and code written by humans is is
fallible you know we always know we make
mistakes and so it's a matter of um
of us testing things to make sure things
are working but
we're we're reasonably sure that these
functions
have been used by so many people that
there's not likely to be massive errors
in them as opposed to your own code and
my own code when we write it we're like
yeah
i i'm pretty sure there are massive
errors in this and i know
that this is going to be a process of me
fixing those errors before i'm totally
happy with them
so always like that um
but the standard library functions you
can have a reasonable amount of trust
in them as we go further in we're
actually going to look at writing our
own
uh library stuff our own separate files
that we're going to use
but we'll get into that later
okay so
one thing that um
i think do i have a slide on this yeah i
think i was going to look at the inputs
and outputs of stuff like scanf
and show you that because that's
actually going to come up in the
assignment as well
you may notice that everything that i'm
teaching you today is stuff that's
useful for the assignment so hopefully
that's handy for people
we're going to be using libraries to do
memory management and that's actually
going to be later on this week we're
actually going to start
digging into the memory of our computer
and playing with it but printf and
scanner are things you've already been
using so let me show you
um one thing that we can do with the
output of functions sorry i just need to
push my camera feed out of the way of
the text
there so functions
are going to return the result of what
they ran so when they have their return
keyword they're going to say okay this
is this is the information i'm giving
back
um so like any c expression once the
expression is like run or evaluated or
something like if we do a plus b
somewhere like c when it reads is going
to say okay i'm going to take the values
of these two things i'm going to add
them up
and that's what that whole section of
code is going to be a function's like
that as well
we're going to run the function and when
it's finished we're not going to see a
function anymore in a sense we're going
to have
whatever value the function spat back
out
when it when it called return so if we
look at
scanf as an example this is a function
we've used already but we've never
actually used the output
of the function we were just using it
for its side effects which is the fact
that
it can read some information in and that
information will be written directly
into a um into a variable but scanf
actually has a return
so the return the integer that scanf
returns
tells you how many things the scanf has
read in
successfully so we can actually use that
to do
some interesting stuff so i actually
have the scanf demo
which i will oops
sorry i was on the wrong window
login
let's log in very slowly
let's log out and try logging in again
that was a bit weird
okay good scary for a second there
i love how um the joke
of um if anytime something goes wrong
with a computer you just turn it off and
on again that's exactly what i did there
i was like
i'm not sure what's happening with that
particular vlab server so i just really
re logged in and got a different one
we are in lecture seven
and i have this scanf demo
so there's a lot of code in here
and i'll let you see the code and stuff
i'm going to talk a little bit about it
but i'm not going to write all this
stuff from scratch but i'll show you a
little bit
oh vlad is
being a bit of a slowpoke today
i wonder if i don't know if anyone's
noticed but i just upped my stream bit
rate because i realized i wasn't
streaming at 1080p
so maybe i'm killing my upstream which
is slowing down vlab
i'll fix that later okay so
if i wanted to scan in 10 numbers i
could actually use
the output of scanf to decide how many
things
that i'd inputted so scanf is going to
tell me
how many objects it read incorrectly so
i'm going to say objects not
not numbers because it's not always
numbers right i could do a percentage or
percent lf and they'll be different
kinds of numbers
and it's going to put them into this
array and every time it reads something
successful into the array
the the count so how many numbers i've
read in this number count thing goes
up by one so we can do this kind of
thing
where we can say only if a number was
written successfully does this count
increase
and then you keep going until you've
read in 10 numbers
i do have a little easter egg in here is
like see if you can find the issues this
causes there are ways to make this break
so this may not be the best way of doing
things
um there are other ways to scan in 10
numbers so i could do it like this
this is a very very sort of blind uh
brute force
way of doing this where we just do
everything really explicitly
yes this does work um but if someone
said
okay ten numbers worked great can you do
this for a hundred
um somewhere through the
the typing of all of these up to 100
you're probably
going to get very very tired of the code
that you're writing and
and be like ah there's got to be a
better way of doing this so usually i
would consider a looping option to be
better than typing it all out
but i thought i'd show you because this
definitely works
and it is interesting to note that when
it's looking for numbers
scanf will ignore white space in between
so if you type in numbers with spaces in
between
this thing will still work
there are also ways that we can do
things where we can say let's keep
looping until we've received
a particular set of numbers or until
um until the user actually says
i would like to stop reading in numbers
now
and so there's a there's a particular
thing that's going to come up a bit
we're going to learn about this in your
tutes and labs as well i think it's this
week
is oh wait this week or next week it
might be next week because i'm showing
it this week but i'm not sure
um uh so
we can press ctrl d at the end of our
input when we're typing something in and
then that will send the signal to our
program
that is known as end of file it's it's
not really used that much
for for typing in but it's actually it's
called end of file because it's usually
the thing that says
oh i'm reading stuff in from a file on
my computer or from a network connection
or something and it's the thing that
says okay the message has ended
we can do this with control d so what
this now means is i can make a loop that
goes
forever and just keeps taking numbers in
and storing them although in this
instance
we are still going to stop at 10 but i
can get it to stop at some point by
saying okay
i'm finished here and i can send control
d
to the command line here and the way
that we're dealing with this
is we're using this result so i can scan
in a number so i don't even need to
worry about where this is
being stored or anything if i scan in a
number into result and i can say
check if a result is 1 or not because if
result is 1 then we've read a number in
successfully
if the result is not 1 then we have some
kind of invalid input
which means maybe someone typed some
letters in or someone press ctrl d
and says this thing is finished which
means that scanf didn't get any more
numbers
the result was not equal to one we flip
this keep looping from one to zero now
this is
that same kind of thing that i was
talking about
when we were making loops this is
actually combining our two types of
loops together into one
so it has one loop that goes up to ten
but it has this other thing which was
our sentinel variable
in a loop that said that if this thing
changes we're gonna we're not gonna keep
looping so i've just said
if we didn't get a valid value we will
no longer receive any more values
so it's like that's it we're done and
then
the loop will get around to here keep
looping will be zero
here and so the while loop will stop
running so what we can do then is we can
have this kind of code that says
keep taking inputs until the input is
either
invalid or finished because both control
d are an invalid input are gonna
make this scan f not equal one because
it won't have read a number in
and then when it's not equal to one the
result of the scan f is not equal to one
we turn off the loop so it's a nice
little in fact
let me i'm going to comment out some of
this
and we'll run this and i'll show you
how this is working
um
i'm gonna i'm gonna keep this bit here
so what this is going to do what this
bit of code is going to do when i run it
it's going to ask me to enter 10 numbers
and press ctrl d when i'm finished so
i'll enter a few
and i'll press ctrl d and then after
that's finished this should print out
all of the numbers that i've stored in
this array so let's
compile that
scanf demo make sure everything is a lot
of people asking about the code there
hopefully michael is explaining
everything to everyone
eric's asking if scanf always returns
one if it receives a valid value
scanf actually ah let me
let me show you how you can find out
this information
scanf in c
hmm i know this one
see library function in scanf reads form
and input from standard in
forward following is the declaration so
we know we can do that
parameters
import return value on success
the function returns the number of items
of the argument list successfully read
if a reading error happens or the end of
files ritual reading the proper
indicator is set
and if either happens before any data
could successfully read eof is returned
uh eos is that thing i was talking about
in the file
all we need to know is that eof won't be
one of the numbers
that we get so this is the kind of thing
that we can read if we want to like some
of this stuff is a bit confusing but a
lot of it you can get a lot of
information out of it
which is saying that the function the
key bit of here it here is the function
returns a numbers
number of the items of the argument list
successfully read
this makes it very easy if you're only
reading
one number at a time so it'll give you a
one if it's correct
and it'll give you some other result if
it's not correct so this is why i'm
checking
just for the correct result here this
one
with its 10 numbers commented out at the
moment but this one with its 10 numbers
would give us a 10 if it had run
correctly
okay so let's compile this
and run it
so please enter up to 10 numbers ctrl d
if i'm finished so
just to make it easier we can see what's
going on
i'm going to enter one two three
show you how it scanf is going to deal
with
enter keys in white space as if they
kind of don't exist
now i'm going to press ctrl d ctrl d is
going to
finish my input and this is the stuff
that got put into the array so i got my
six put into the array obviously the
array has been initialized as all
zeros where did we create it
here actually don't need that zero for
that but sometimes i put the zero in
there to remind myself it's going to be
all zeros
but yeah so that was
scanf saying i'm going to keep looping
and taking your
input in well not scanf my program using
scanf
was just going to keep looping but the
only time it was going to stop looping
is where we didn't give it a number so
when we didn't give it a number was when
i press ctrl d
there are other ways that this thing
could could stop
so say i do something like this
my scanf has said you typed in a thing
that is really not one of the things i'm
looking for
so i tried to read a number you gave me
letters
um that is not going to give us a 1
because when that scan f
ran on those letters it was not able to
read a number so it didn't put a number
in
and so this ends this loop here so a lot
of people were
asking i think when we were very early
on like in
in week one and two uh looking at
reading in those dice numbers and stuff
and saying okay what would happen if we
didn't do that
this is the reason why i didn't teach
you that earlier because it's really
about like
oh scanf is a function and a function's
going to return a value and if it
returns a different value we need to
check it differently
and really this works well when we're
looping and so
obviously in week two i was like i'm not
going to teach you that yet
that's there's too much other stuff
going on but now you can do something
that actually uses scanf
and rejects the import that isn't
correct or
knows that it can end the input when
it's told the input's going to end
so hopefully this scanf demo here will
will come in handy i'm going to get rid
of the comments
so that all of the code
has a syntax highlighting another thing
that we can do if you want to take this
to the next level this is slightly
challenged territory
is your while loop
can actually have a
um a function in its condition
so in the question that we ask when we
ask does this while loop keep running
we can actually put a function in that
question so the question will always be
asked
the scanner function here will always
try to run
but then it will be converting it into
like a one or a zero
response here by saying was this thing
equal to one
so if scan f was equal to one as in did
we read in exactly one number from this
scanf
it's the same thing as this kind of
check but it's like slightly inverted
so if we did read a number in then the
number
of the count of our numbers that we've
we've done goes up by one but also
the scanf function here has run and it's
put a number into
the array so this is the way we can
actually add on to things where we can
say
the question in the scanf could actually
be an entire function if we wanted to
you can get really complex in these
things if you need
but this is a way to get and get a
little bit even trickier than this
functionally it's really the same code
as this
because it's going to run scanf it's
going to check the result and then the
loop is only going to keep going if
if that result was correct this thing
it's actually checking
that result before it gets into the loop
and you'll only get into the loop if
that as a result was correct
so they're both doing the same thing
where they're going to read in a certain
number of numbers
but then stop if either the user says i
have nothing more to give you
or the user makes a mistake and says i
give you invalid import the program's
like i can't continue with that
you know so this is the the very very
short
version of this this is probably easier
to understand because you can read it
line by line
but if you want to you can get to the
point where you start um
start putting trickier things into your
while loop questions anyway i just
wanted to show you that um
i'll save that again so that's still in
there you can play around with this code
um some of this code is going to come in
very very handy in the first assignment
um i will often oh by the way
if you use code from from the lectures
or the labs or the tutorials in your
assignment
that is um that is totally fine you can
do that if you want to
right so if you need to use code like
this to read in
uh multiple things you can um bear in
mind
that i have written this specifically
and i know how the assignment works
you can't just copy paste this in expect
it to work it won't just
work like that but a lot of the theory
of what you're learning
in in demos like this will work very
well in the assignment
um
people asking about
oh i think people are talking about eof
and stuff like that i'll let michael
answer those questions
i don't want to get too deep into
discussion of things
that um we probably don't have time for
in the lecture okay so hopefully that
scanf demo
shows you a lot of interesting stuff
that can help with
um with working with the output of
functions but scanf is a particular one
where
it's the kind of function we often want
to keep looping until we hit a certain
point
and then we stop so hopefully that demo
code helps you out there
okay so
another thing that we've been looking at
recently are arrays so we should do a
quick recap of that
and then we'll go a bit deeper so arrays
contain multiple variables of the same
type
so we have an array it's a chunk of
memory so there's a chunk of memory
for each individual um
variable but an array is a variable that
contains enough memory for multiple of
the same type
so this is an integer array i think
um it's not defined anyway but
we will be storing multiple integers in
it and each of them
doesn't have its own variable name the
array will have a variable name
and then each individual element as
we'll call them in the array
is accessed via its index in the array
and the index is basically
how far away is this number from the
beginning of the array so the thing at
the start of the array
is zero away and then the first
that the number one element is one
element from the beginning that's the
way
you can think of the indexes um this is
also going to be the numbers that we
would use to loop
over the array we've got some detail
here i decided this time around
to use doubles not integers because i've
i think i've used integers in pretty
much
every every example we've done so far
but it's good to remember that
an array doesn't care about what
variable types it's holding
it i mean it does care that's the things
it's holding but
it you can make an array that holds any
other kinds of variables right so we've
got integers and doubles as our types of
variables and you can obviously make
arrays with either one of those
so i make simple array here they're all
going to be 0 at the beginning and i can
assign a value
so just remember square brackets are the
symbol of the array
so when an array is being created the
square brackets are used to decide how
big the array is
after the array has been created the
square brackets are used to access
individual elements
in the array so even though
this word here and this word here look
very similar
they're different because this one is an
initialization and you can tell
because it says this is the type that
i'm making something off
afterwards when you're just using it the
square brackets mean i want to access an
individual part of it
if we want to we can test the values in
the array so anytime we're accessing
one element of an array it will act
exactly the same as
an individual variable of the type that
the array stores
when we want to access multiple
variables in array i've talked about
this a fair bit
that a loop is perfect for this so loops
starting at zero
and going until less than the size of
the array
are always going to go through and look
at every element in the array there's
going to be plenty of times that we need
to look through every element
of an array and i think this is going to
be sort of
the basic um core understanding of how
we're going to work with arrays most of
the time
if we're looking for something in an
array or we're trying to get the total
of the elements in the array or anything
like that
we're just going to loop through the
array and then based on the information
we see there we're going to do something
so this standard while loop through an
array i mean it's not
the printf is not the standard bit of it
but the access of the i
element inside the array is something
that i think everyone should get pretty
used to
because it's the kind of thing you're
going to use a lot
i did want to talk about one other
detail
about arrays is that
you may have i don't know if people have
done other programming and stuff like
that
seen other things where you can actually
change the size of a collection
of things arrays in c don't do that so
arrays are very very fixed in size
and they're fixed when the program
starts running
and they will only do that size so when
i declare this array of size
four you remember that memory diagram i
won't jump back
i'll have to go find slides to jump back
but that memory diagram of like okay
here's your code and here are the
declared variables and stuff like that
the array is one of those variables so
when the program starts running it gets
a specific amount of memory
for each array which means that we can't
do
this i can't say here's my array size
here as a variable
so a number that doesn't have a fixed
value i can't then create an array
of that size because i can't be sure
that this is always going to be the same
size
and this memory is assigned when the
program starts running
if while i'm in development i would like
to
maybe change the size of my array so
this is changing it while i'm editing my
code
not changing it while the program is
running i can actually do that
so i can use a constant for my array
size so i could
this is a very poorly named constant by
the way like this would usually be
have some kind of meaning but in this
case it's sort of all right
so i could say this array size is 4
and then i can use this in here because
i've guaranteed because this is a
constant this number is not going to
change
so this is fine it will be able to
declare at this size
but a variable wouldn't work i can't use
a variable as the size of the array
so sometimes and i think we did this
with the number of players
in the um in the demo for that they the
game scores
i think i think it was called score
tracker that we did last week um where i
said players
num numplayers is equal to four but then
that could potentially change
later on so this doesn't necessarily
give us an array that can be changed in
size but it means like
if we're working on this project and
then part way through we're like oh
actually i need this thing to be bigger
or smaller i can just change this one
number
and then everywhere where i'm using
these arrays or anything in there
the number will change so the constants
will make it a bit easier
but i think the thing that i wanted to
point out is that we can't just have an
array that gets created
on the fly like this based on this
particular size
it's going to have to be set up in
advance
there are other ways to do it but we'll
talk about them later
but yeah i think the thing that's
important to to
to learn is that arrays are kind of
you can think of them as being created
when the program starts they're not
necessarily accessible and the program
starts they have to be declared with a
name and stuff
but once the program starts it's already
decided how big all the arrays are going
to be
okay i'll put myself out of the way of
the meme for the moment
i have said that an array is a variable
it's a variable that may contain other
variables but it is a variable
and i've said yes an array is a variable
an array can contain variables which
means you can put arrays inside arrays
am i doing the face right hang on
yeah there we go yeah so what we get
with this situation is if i can put
arrays inside other arrays
that means for every element in an array
if i have an array
i can quickly multiply the amount of
things
that i've got inside an array so
if i have an array of size 10
and then i have it instead of storing
individual
elements i have it storing other arrays
that are also
size 10 suddenly this 10
10 arrays each with 10 elements in it
goes up to 100 elements
and if each of those elements stored in
that is 10 then you've got like more and
more and more right
eventually the thing that we're going to
store eventually in the end of it is
does have to be some kind of actual
variable type but we can do these
multiple
dimensional arrays so the thing that i
like to think about this
is an array is like is a row of elements
and then if i have an array of those
arrays i can have columns and rows and
kind of multiple rows
in it so we're getting towards the fact
that we could build a grid or we could
build a
cube of like integers or something
and then we can go to more dimensions
than that but i'm going to stop
at three because i think three
dimensions is a reasonable place
for humans to be able to think about
something because we live in a
three-dimensional world
uh once you get into four dimensions
then you're like okay
yes theoretical mathematicians totally
fine with this kind of thing
uh computer scientists partially may be
okay with this kind of thing
but um you know uh
human thinking starts to get a bit
twisted when we start to add
uh too many dimensions to things
so i'll get my head out of the way there
so this is a way that we can think of
two-dimensional arrays so you can think
of them like a grid
and you can think of each of the indexes
being used as like a coordinate to reach
a particular square in this grid and
this is the way that we're going to be
using these things
in the first assignment as well so
you're going to get plenty of practice
with these
so we can think of as this array here
has three elements in it each element in
this
array is an array of integers
and these arrays of integers have five
elements
in them so if i go into this array into
element one of this array
then i can see these so i go to element
one of this array in element two of that
array
then i get down to the number 91 so this
this setup allows us to store a great
amount of information
under two different indexes there are
some rules
though the um the the way that we're
going to be using these
and there are fiddly ways to do this but
the way that we're going to be using
these is reasonably simple
in that this array
everything in this array each element of
this array
is always going to be an array of the
same type
so in the same way that like when i
created an array of integers
um every integer inside that array was
the same type it was a 32-bit integer
so when i create this array of three
arrays
each one of those is the same type so
each one of these is an integer array of
size
five and you can define that when you
create it
so some code for this and it's not too
hard for us to use because it has a kind
of a shorthand
i can say make me a grid a size four by
four
and i can initialize all the zeros in
the beginning
so this grid of four by four
says that i have an array of four
elements
and each element inside that array is an
array of four elements
and those elements are integers so i can
say i've got a four by four integer grid
and it's going to look a bit like this
this is a
three by five but anyway
and then we can think of this as being a
two-dimensional grid of elements that
we're going to be doing
things like assigning values testing
values
and stuff so if we want those integer
values
then we're going to need to give it two
coordinates so we can go all right i go
down these coordinates and then i go
across these coordinates and then i hit
a certain point
we draw them in this particular way with
zero zero in the top
left because this is the way that if we
print them out this is going to work
so if we were going to do a loop to
print these out i would loop
starting at zero and i'd loop through
these going 0 1 2 3 4
and then i go down to 1 and then i go 0
1 2 3 4
and then i go down to 2 and 0 1 2 3 4.
so we think of them in this order
because this is the way we're going to
be printing them out with loops
if you're doing maths we would very
rarely be starting
with zero zero on the top left corner of
our graph
and then um and then having having zeros
having this index count
downwards instead of upwards like
usually the positive and the y
axis goes upwards in basic maths but
we're going to do it this way because
it's the way we print it out
so it's going to be much easier for us
to think about how we work with this
thing as a data structure with loops and
stuff like that um
if we count downwards like that
also if we go we're going to go really
really kind of historical
about this this is the way that um our
computer monitors display
things so they start in the top left
corner and they go across and they go
down to the next line and they go across
and they go across
and that's how the pixels actually
change color um in a sequence like that
um it's really really old school it's
based on old cathode ray
monitors um and like tvs and monitors
used to be like that where they'd
actually have a beam of light
that would come and hit the front of the
screen and illuminate things
and they'd have magnets that would just
move that beam
across and that was the the sequence it
used to do it'd do the top line from
left to right
then the next line from left to right
and so on and so on all the way down
uh and so a lot of that kind of legacy
is still
in our um is still in our computing
where anytime we're using
two-dimensional things we're usually
going to be starting at the top left and
we're going row by row
as we go down it so your while loops are
going to be
um are going to be doing that same thing
over stuff like these 2d grids
okay so we'll take a break there this is
like
this is one of the funniest gifs that
i've got
i always like to show this to people
because it's it's hilariously triggering
so we're going to take a break
and i want to talk about um
about problems because we're going to
hit a point now
where we're getting many many more
problems than we would have had before
and especially we're going into an
assignment now
you're going to find situations where it
feels like this
wait which where am i now where i've
moved my camera it's going to feel like
this
it's going to feel like things just
don't work no matter how no matter what
you do
and stuff and it's just more and more
and more frustrating so
i just want to remind everyone that
every big problem is usually made up of
small problems and it's a matter of
trying to
find your way around those little
problems
and trying to see if you can break down
problems into little bits and so you can
you can work with self-contained pieces
that are like
easy lab exercises rather than trying to
think of a gargantuan project
the size of doing an entire assignment
all at once
so yeah so this is um
this uh this has always been really
really funny when i show
this gif in person because the the
physical responses
the the noises that i hear in the
lecture theater when i show this is
always really funny
um this is actually this is an art piece
so this has been in like
playing in galleries and i can imagine
what that would do to people
but anyway let's take five minutes break
we come back i want to show you
both um uh use of functions
as well as 2d arrays in an example we're
going to do so it's 11 57 now we'll come
back at exactly
1202 um i am tempted to leave
this uh leave this gif running for the
entire break
um no i won't do that that's too mean
it's already looped more than once now
so i'll go into break mode now
and we'll be back in a second
all right i'm back and um
and the gif is back as well
all right all right let's move on from
the pain
but you know you all signed up for a
programming course right
this should have been what you were
expecting
as someone who's been programming for
several decades
this is now funny it's not it's not
painful anymore
i don't want to i don't want to
discourage
people from programming but um
solving frustrating problems is
is like one of the things that that that
defines
uh programming i think
but the reward when a problem has been
very very frustrating the reward when
you complete it
is uh is a big deal so it's something
that i think uh
that will will sit with a lot of people
when you when you do start to be able to
solve these things or when you look
back at this moment when you go oh this
is when the first assignment was
released i had no idea how to do it
some of you are going to be able to look
back in a few years time and go i
remember thinking that stuff was hard
and i remember mark joking about this
kind of thing but now
now i have much more difficult problems
that are very frustrating but at least
it means the older problems are less
frustrating
so hopefully that's where we all get to
okay so i'm gonna do some coding now
are we gonna code a simple game that i
call the tourist
um so we're gonna have the a world that
the tourist is
is is um traveling around on so i find
this
um i made this example before covert
and i find it now a little bit ironic um
and a little bit sad because we can't
travel
so the tourist is traveling but maybe
the tourist is traveling just
just in an area around their own city
that they're in
i mean i don't know where everyone is in
the world but some of you are probably
in places in the world where you can't
even
travel around multiple cities or
anything like that so hopefully
hopefully i'm not being too mean by
using an example like this
but what we're thinking about is a
two-dimensional space
and so the world is a two-dimensional
square grade space
and there's a tourist that is somewhere
in this space they can move up down left
or right
in this space and we want to be able to
show
this particular world including where
the tourist is
and we also want to get into this
concept that the tourist likes seeing
different things
so every time they walk somewhere we're
going to say the tourist has already
been there
and then we're going to say this game
will be lost if the tourist goes
back where it was before and um
and they accidentally go where they were
before so
[Laughter]
people in chat are laughing that i'm
saying that the world is flat
look in computer games the world is
nearly always flat
i if we if we want to do this spherical
then i'm going to have to teach you
some significantly more difficult uh
programming stuff before we can
get to moving around on a spherical
surface
so we're not we're not going we're not
going a real world situation here we're
talking about a
virtual world here and and nearly all
virtual worlds that we
that we play around with are actually
dead flat like nearly all computer games
are on a flat plane
and then there's stuff built on them
right so
i don't even know why i got into that
conversation yeah
it's a minecraft world it's it's square
and it's flat actually in the minecraft
it's a cubic world
i'm going to move on before i can get
deeper into this conversation
so we're going to have some starter code
this time and i wanted to do some
starter code because you've been given
some starter code with your assignment
if you haven't looked at the starter
code yet
it's worth looking at because you can
see some of the stuff about the layout
and it actually helps you getting
started because it tells you where to
put things
the starter code that i've got here
i'm going to close the scanf demo
because i don't need that for the moment
is called tourist.c so you can see this
in
one moment
we're in lecture seven
i'm gonna put that in the youtube chat
there um if you're not on youtube and
you're watching this after the fact
you can also just follow that web
address to the code so this is the live
code if you're watching after the fact
you get the result
of the code um but i think i put the
starter code
in the lecture section on the website
anyway i always have to remember that
not everyone's watching this like
exactly as it happens but if you are
live then you can just watch my code as
it is edited
okay so here and this is i actually put
more than one date in this because i
realize this is one of my oldest
examples that has survived through many
iterations of
um com1511 so first created in june 2019
but i edited it the other day
for this so this starter code is
actually
very very similar to the starter code
that you get for the assignment where it
had some dimensions
for the map itself i think that the
starter code for the assignment
may only have one dimension and that's
the same because it's always going to be
a square
world but it also has this function that
prints the map
and it has a main function at the moment
there's nothing in the main function so
it's not that much in it but this is one
function that we can see
this and this is how you can think of
the functions right it does one specific
job
so it prints out the map um and we're
probably going to use it multiple times
so this thing is going to loop through
the rows and the columns of the map so
we're calling these rows and columns
to make it a little bit easier for us to
understand
where we're going with these things
so
we're going to loop through the rows so
if we have
one second
we're going to get more visual the the
the more
complex our concepts are getting the
more visual i'll end up getting
in the slides and the lectures
i'm gonna make this
reasonably small to begin with so it's
just easy to see
i should have left myself enough space
for the coordinates
so the way that we're going to be
looping through this is we're looping
through rows
so these are rows
and i have not left myself enough space
to draw this these
are the columns so when we're going to
loop through this we're going to loop
through the rows as the outer loop
so the first thing we're going to do is
go to row 0
and then inside the loop when we're at
row 0 we will go
to column 0 and we'll do a while loop
through the columns
going across here so what we do is we go
to row zero and then we go to column
zero
column one column two column three then
we go to row one
column column zero column one column two
column three
row two etc you know so we are doing
this thing where we're writing
each row at a time and then what we're
doing is we're printing out the number
that's stored in that row so if we look
at our array
it's this map that we haven't created
one
so we're going to have to create one at
some point to give one to this function
and the wrap the map we're assuming at
this point so this is actually slightly
different i've done a lot of
other array functions
where it was not specifying the size
and it was had some size information
this one's actually saying okay
we're expecting this thing to be this
size and then what we're going to do is
we're going to loop through these
and say whatever number that you've got
stored in a particular coordinate there
we're going to print it out but we've
also got this condition here that says
that
if the
um i should probably
do this in snake case
here
but the question here is we've been
given
inputs um for where the tourist
is so the tourists will have a position
r and a position c
so this is the position of the tourist
in a row and column
and if we if we are where the tourist is
we're going to print out the t
to show where the tourist is otherwise
we're going to print out
the numbers that are shown in the map so
let's actually
set up this world and get it going so
it's better if i call it a map rather
than a world because everyone's going to
think i'm talking about a flat earth
i'm going to change i'm going to i'm
going to do an inter array called earth
and call it flat now i'm going to call
it a map
and i'm going to make this a
two-dimensional array if it's a
two-dimensional array
then here i said this has a certain
number of rows and certain number of
columns
and so we're going to do the number of
rows first
and then the number of columns second
because we know that in this we're using
the rows
as the first um
the the first of the pairs of indexes
that we're going to use
and that is going to make it
because of the way we printed out it's
going to make it these rows and the
other one the columns
because we're always looping through
the first of the two numbers first and
then
the second number afterwards because
it's going to be rows first
then columns all right
i'm going to start this thing as zeros
because i don't
necessarily need any particular
information in this thing to begin with
also if i want to initialize something
like a 2d or array i'm probably going to
need to write a whole function to do
that which is going to
go through and either put zeros in
everything it's going to loop twice like
this
so this setup here
with this finish
is most likely going to be the kind of
thing that you'll be using anytime you
want to look at
every element in a two-dimensional array
so in the same way that we would loop in
a one-dimensional array through
everything
looping through a two-dimensional array
is a loop within a loop but anyway
here's my map setup
and i'm going to have a position for the
tourist
so the tourist positions
i need to name these correctly
the um the tourist position is pretty
simple because i'm probably just going
to use an
integer for the row that it's currently
in and an integer for the column
that it's currently in uh if you've
looked at the assignment
yet you may have seen the um
what's going to call it the the laser in
the assignment
um the laser can nearly be represented
just as an integer because it's just in
one of the rows
someone said he's behind you oh
what have i done oh yeah no no someone
else has already said puzzle policy so
yeah
i think now that i fixed that there
hopefully that will be fine
unless it's somewhere else in here no i
think that's okay all right
so i've got my map there and i'm going
to have my tourist positions
so this is going to be two integers
um so i'm going to use
those two that i had before pause r and
pause c
and this is someone said line 33
have i done something weird 36 33
did i add lines there so now i can't see
where i'm talking about
hopefully that's fine puzzle r
policy
yeah i think that's fine because these
are the rows and columns there's the
iterator things
and then there's the position things
we'll find out if i've made if i've got
any issues everyone's saying line 34
there's an issue is there a typo
somewhere
i actually can't see the problem at the
moment
oh it's the equals thank you everyone
i think this is important i think
important learning experiences to think
that it doesn't matter how much
experience you have
as a programmer how much time you've
done in these gigantic projects you've
worked on
the little issues are always there the
little mistakes are always there
so i think that the one thing that i
want to say to everyone
is don't beat yourself up if you make
these little mistakes as well
they're going to be in your code here
and there right
none of us are perfect um it's more
important
what we do to fix our mistakes and how
we
how we recover from errors than it is
to to try to stop errors from happening
i mean we do
obviously want to try to stop errors
from happening um
but there's an understanding that they
are inevitable
and it's a matter of um just trying to
fix those things instead
also it would have taken less time to
compile this
and get some information that it did me
looking through and getting confused
so sometimes you can just pick it up in
testing um but yeah the thing i want to
say is
don't worry too much when things are
weird so i'm using this particular way
of creating multiple integers of the
same type here we can actually just put
commas
in between them so because i haven't set
these up with values i can just do this
so if i want to
give the tourist a position so what i
might do is try to put the tourist in
the middle of the map
there's no exact middle of the map
because it's 10 by 10
but i can do um
a roughly middle position of the map
like this
so what's hopefully going to happen is
there'll be a tourist somewhere in the
middle of the map
and the map is the right size based on
the hash defines
that we have there
good time now to have a look and make
sure this stuff is working and this is
why we have the print map function why
we went to the trouble of making the
print map function first
is we can always just say hey
run this and see if our information is
correct
so this is also why we do this in the
first assignment so
we're giving you a hand with what we
call visual debugging
so when everything that we're doing is
in a space that's kind of like
a picture it's much easier to see
whether you're
whether the work for your assignment is
actually working correctly or not
because you can always just print it out
and we wrote the print command
to make sure that you can always see
whether the stuff you're doing is
actually ending up in the right place
or not so with this we can do the print
map and the print map is going to need
the map itself which is the
two-dimensional grid
of that size so when we want the whole
grid
if i wanted a single square of the grid
i would use the square brackets to get a
single square when the function wants
the whole grid
we just give it the whole grid by name
if it wanted an array i could give it an
individual array like this but that gets
complicated
so we're going to give it the whole map
and it wants the row position
of the tourist
and it wants the column position of the
tourist
so this printmap function here i'm going
to use this probably multiple times in
this program
this printmap function is going to show
us what the current state
of the hang on i'm just going to clear
that
what the current state of our world and
our tourist is
so let's compile this
it's taking longer than it should
is everyone else running stuff on vx3 at
the same time as i am
okay that compiled i'm not sure why that
was slow i think um maybe there's a lot
of courses running at the same time that
are running
a lot of stuff on the same computers
okay
let's run this and what we should get
is here is our map and we set up our map
as
all zeros so this empty thing is going
to make
all of these zeros and then the rough
position of the tourist
of rows divided by two columns divided
by two
is going to give us zero one two three
four five five is half of ten so it's in
the right row
zero one two three four five so the
tourist starting positions
is five five which is fine that's close
enough to the middle of the map
all four of these squares are pretty
close to the middle of the map
so now we know that i've been able to
set up my position correctly
and i'm printing out that correctly
go back to my slides and see if there's
always like remind myself if there's
anything i need
to to talk about so we've set up a grid
and the tourist position
the tourist is going to move one step at
a time so we can think about movement
now
um and then we're going to think about
when the tourist visits a location we're
going to set that to one
or we're going to count how many times
the tourist how many times the tourist
has been there that kind of thing
and we can check locations afterwards
but let's go
this next step here is to move the
tourist so we've got our square grid
this is the same thing that we did there
oh i actually did it even more shorthand
here so let's do that we might as well
because actually makes this a little bit
easier
i can do this initialization actually it
wasn't zero
it was in the middle
so you can do that i actually don't want
to do this anymore
because this now makes it look like i
only made one integer i don't i don't
like the style
so oops
this is much more clear that i've got
two separate integers here
okay so we set this up so let's let's
think about movement now so
with movement we have
only things like integers and doubles
that we can work with
but one of the nice things about doing
that stuff with integers is i could use
the number pad directions to move
ourselves around
so if you look on your keyboards i mean
this is awkward because my keyboard
doesn't have a number pad
but if you look on your keyboards you'll
be able to see that
on the right hand side actually if you
heaps of people using laptops are not
going to be able to see this
because most laptops don't even have
these anymore but we have a number pad
which is the grid of numbers
so um one two three on the bottom
four five six seven eight nine at the
top and
that can actually form a a grid of
directions that we could use so
someone's saying waysad
the wasd when i teach you how we're
going to use letters as
variable types and stuff we could use
that but for the moment
um we're going to we're going to use the
numpad for the directions
and we're going to do some looping so
that we can repeatedly take information
from our user
about the direction that we want to go
next so
here is a an input
uh input gathering
uh if else statement so basically what
it's going to do is it's going to keep
doing scanf and then this is inside a
loop by the way
and then every time it does scan f it's
either going to
change our position somewhere or it's
going to exit i'm going to talk through
this as we create it
rather than like just showing it there
like that
so what i might do
what i might do is
i was wondering if i could put this in a
function i could potentially put this in
a function
um this gets to one of the fiddly things
um about functions that i will explain
later but
it might still be worth doing
oh no i can't i can't because
i'm trying to change two variables
i will be able to do this later when i
teach you other things
but for now i can't because the position
r and the position c
either one of them might change and if i
can only give back one integer then i
can't do this yet so i'm not going to
put this one in a function
we're going to do this one in the main
okay i'm gonna get myself some space to
work with here and think about what i'm
gonna do
so
take input um
check
which direction
[Music]
to go depending on the direction
change the pos r
or pause c
and all of this is going to be
looping for
multiple i'm gonna call it turns
so this is you know i've spoken about
this before so i think this this should
be getting through
to everyone now that one of the ways
that makes it really easy to do your
coding
is to think about the the process that
you want your computer to go in
and say okay i'm going to write all this
out first and then all i need to do then
is
translate this into code it makes it
much easier so i know take input's going
to be scanf looping is going to be a
while loop
checking things is going to be if
statements and stuff so this makes it
easier for me to get going
so i know i'm going to loot for multiple
turns
so it's a while loop and i know that
each time that
that's going to do something it's going
to take input so
i know at some point i'm going to exit
this loop so
i might
just add a guess set up something like
this
which is keep looping and while we keep
looping we are
we are going to run this while loop
multiple times and every time we run
this while loop we're going to take
input so i probably don't need this
comment
but i'm going to delete it now that i
know that i've done something so i know
i'm going to do some scanf
in order to do some scanf i need a
variable to put this
in so i'm going to call it input
[Music]
i don't know whether i need to
initialize this or not but i think i'm
going to initialize
this in case someone gives me incorrect
input
then my scanf is going to
scan f in a number
and it's going to put that number into
the input
but i do need the result of my scanf to
be somewhere so that i can decide
whether i'm going to keep looping or not
so i'm going to i'm gonna try to name
these things
a little bit verbosely
which is like lots of words basically
that's what verbose is it's like what i
am as a human
i talk a lot um
so that you can see exactly what i'm
doing so i'm keeping the input result
of the scan f here so if the input
result is one
then i know that we're fine if the input
result is anything other than one
then i know that we did not scan in
anything correct into the input
oops
so if
input result was
not equal to one
then we can't keep looping
yeah i can set that to zero otherwise
i'm not sure what it didn't like about
what i just typed i didn't want me to
put an else statement in there
um otherwise
input was a number so if the input was a
number
then this happens check which direction
to go
copy paste that in there i don't need
this down here anymore so i'll delete it
so we're going to have four different
directions we can go in uh
up down left and right or um
north south east west if you want to
call them that um
cameron's asking is there advantage to
having a sentinel in the loop as in the
the keep looping
variable versus having um
the condition here in the loop
so we could do this if we wanted to we
could put the scanf
in the condition of the loop which is
kind of what we did in the scanf demo
before i'm going to leave it as it is
for the moment because i've already kind
of half committed
to this but i think that it could be
interesting if you want to
to do what we call refactoring where we
rewrite the code but the code actually
does the same thing but we rewrite it
so we've been interesting as like a half
challenge for people if you want to
is take this scanf put it here in the
while loop
and then see if you can re-jig
everything else in here to make this
work after we're done with it
yeah because i think that it will end up
doing the same thing but it might
actually make the code a bit more
compact
and easier to use so
we're going to turn off the loop if we
didn't get a valid result
if we did get a valid result
then we're going to check things so
let me just
look up numpads here's a nice one i'll
just look up images of numpads
so you can see all of these are numpads
um oh god this is what i was hoping we
wouldn't get
is inverted numpads so on computers
numpads have the nine in the top right
corner
so don't use this one we're gonna use
this one right
so this one this image this
is a big one so we can see it so 789 at
the top and this even has the arrows on
it
i'm pointing at my screen here or
because it's zoomed in so
i can't so this even has the arrows on
it so i know 8 is up 4 is left
6 is right and 2 is down
so if input
it was eight
up i'm gonna i'm gonna do my layout
first
of this and then deal with what i'm
going to um
uh deal with what we're going to do as a
result of these tests
afterwards so else if
input is one of the other numbers
so there's eight and i think six was
right
and you can see how these comments are
definitely going to help us um
anyone plays a lot of computer games uh
this code
for every single key on the keyboard is
in pretty much every computer game
that's um that you that you play
somewhere in it is all this code which
is just testing for
individual keys um and then given those
keys take some kind of action
we actually don't even have to write
this code a lot so
in in game engines and stuff this this
kind of stuff checking for these
individual key presses
is usually somewhere in what we would
consider the standard libraries for
those things
so left is two
oh sorry left is four and two is down
let's go back to that image make sure
that's correct so 8 is up
4 is left 6 is right 2 is down
eight is up six is right four is left
two is down
okay good so i've probably got the right
directions
so probably because i'm never sure um i
might actually just do an
else at the end of this so it doesn't
really matter whether the input
started at zero or not but any any other
thing
invalid
or
or any other number we might just
say that if it's anything else other
than that
we're going to stop so if you give us
anything that we can't use
we're not going to loop back again so
we're using a sentinel value to just
exit
on on anything that was in a valid
direction so now we need to think about
if we have these directions what effect
are they going to have
on our tourist so these need to change
the position
of the rows and the position of columns
of the taurus so we go back to our
diagram here
and we say okay this counts downwards
this one counts to the right
so if my tourist is here and i move my
tourist up one
the column value for the tourist doesn't
change
but the row value for the tourist if i
go up one step
the row value for the taurus goes down
by one so
two goes to one so i know i had minus
one from the row value
to go up so if this is up
i take my position row
and i minus one from it and that should
move my tourist up one
if i'm going to the right we go back to
my diagram this is why i draw a lot of
pictures when i'm coding
it makes it easier to think about what's
happening so if my tourist started here
and it goes to the right i know the row
number doesn't change but the column
number goes up by one
so position column plus plus
what i want to teach you about a bit
so why do i do a lot of live coding is i
want to show you ways that you can
program
that make it easier for you to think
about what you're doing so
the first thing i did was just do this
kind of
mapping between the number and the
direction
and then after i've done all of those i
go okay the only
thing i need to think about is the
direction and the coordinates so what
i'm doing is i'm
compartmentalizing which variables i'm
thinking about at any particular time so
i'm not
on a big kind of like uh thing about
okay
this whole thing i need to think about
at one go instead it was like
these inputs i need to think about i put
the comments in once the comments in i
only think about what i need to change
based on this
so there's a lot of ways that you can
code that um
just even instinctively in the bit by
bit of creating things
you're breaking things down into smaller
problems you don't have to think about
too much stuff at once
so it's one thing that's like one of the
reasons why i do a lot of live coding in
this course is that you can see me
separating this massive problem of
moving the tourist around into all of
these tiny little problems that are
on their own actually really easy to
solve so i keep going back to this and
showing you
the movement it starts to be like okay
you don't need to show me that that's
really easy
and it's easy because we separated it so
left is going to be the opposite of
right so we don't even need to look
that closely we know that the column is
going to go in the opposite direction
from the left and the right and down is
going to be the opposite of up
so in the end something like this which
is actually like you know
20 lines of stuff and it's a bit fiddly
and stuff is actually pretty simple when
it comes down to it
okay so the else there is probably not
going to
matter if it changes the position royal
column so we don't do anything there
so what we should have now is a loop
that will keep taking inputs from scanf
and every time it runs it will change
the position of the tourist if it has
been given a correct direction
because this is a game where we're
expecting some kind of feedback we're
probably going to want to print the map
each time so i wonder if we're going to
print this at the start or the
end of the movement i think we'll print
it once at the beginning and i'm going
to copy this
and say each time we move we're going to
after we've done our movement we're
going to print the map out
i guess that makes sense yeah so let's
save this and run this and we'll see
this loop running multiple times
i will put in input multiple times and
we'll see if the print map changes
every time we move i'm just going to
clear the uh
g edit warnings there
compile this hopefully well no one's
been yelling at me
about about any typos that i've made so
i was hoping that this was going to
compile
oh someone asked is it possible to clear
the terminal in c yes
we can do clear or we can do reset
reset actually restarts the terminal but
yeah
we can do that and i'm going to go did i
compile i think i did compile
and i could have typed that in i press
up arrow so many times
up and down arrow goes through your
previous commands
so run the tourists so
we have the tourist here and let me say
i want to go up
the tourist is now four from the top
instead of five from the top
let's go to the right i can go to the
right i can go to the left
i can go down and it's actually starting
to look like it's animating now because
um because this is printing in the same
position every time
um four
to yeah so it's actually moving around
now based on the input and so i could
give it some rubbish input like this
actually it's probably going to take
that four
let me just type in a number that wasn't
one of the ones it can use and it's like
okay
that's your final position and we are
done now
so i could if i wanted to and i think i
did in the lecture slides i could have a
specific
um number for exiting but this time i
just decided yeah you don't have to
um just any number other than a valid
input it's just going to exit
someone's asking can you make the
terminal so it doesn't need
to press enter yes you can it's much
more complicated than this but there are
ways of doing it so that you can just
take the input immediately
well it's kind of out of the scope of
what we're doing in one five one one
though but there are ways of doing it
you can actually probably look it up
there's people making retro games and
stuff like dwarf fortress and rogue
and all those kinds of like old school
like in the terminal character games
that that can actually do that
um so if you're interested in that kind
of stuff yeah you can totally look that
up
okay so now we've got movement which is
cool
um where are my slides oh wait
here hopefully i don't need that again
okay so this is now movement oh i could
have actually done
this instead rather than ending the loop
i could have said hey that wasn't
correct
go try again or something but for the
moment
i think we're okay with what i've i've
created there so the next thing we want
to do
is um track where the tourist has been
so everywhere
we've been we're going to set
the um set the position
on the map to one so what we're doing
now is we're accessing
one single square of that map and
setting it to one
that way what we'll be able to do is
track where we've been
so i might actually do this at the
beginning
of this loop to say uh
track where we've been so we say
whatever position that we're in when we
start
looping to to get input
we're going to say that that position on
the map is marked as
a previous location so
our current location is the position r
position c
so the row position that we're in
the column position that we're in this
gets us to an individual number
which i can set as one so this says i've
been here before
and then we can start going through and
doing stuff i might actually
um be polite to my user here
um
so i'm just going to put a printf in
there to make it a little bit more
polite to be like
rather than me just typing in numbers
there it's actually going to get it
gives a prompt
to move in that direction so we do that
we do our movement
and now with this setting up where we've
been
on the map we should actually be leaving
a trail behind us of positions we've
been to
so i'm going to save this and compile it
and run it and we'll see if now my
movement
is leaving behind me
a trail of places that i've been before
anyone ever played the snake game anyone
got a
or has seen an old nokia
telephone they had this game
which was this and you just walk around
as a snake but it was real time so it
was
much harder to do and then you had to
actually just try to um
not run into your own tail which is
actually what we're doing here
well i could have called this the snake
game rather than the tourist game
um and
um what do we oh lots of
interesting things oh people are talking
about if the character goes off the
screen let's let's
go off the screen and see what happens
so
to the right to the right oh oh i broke
everything
what happened runtime error
index 10 out of bounds for type integer
array 10. you were using an illegal
array index
0 to 9 would have been fine 10 was
incorrect so that was a great thing
that someone said that in chat because
that's super interesting
what happened there is actually i love
it i love it because this is where i was
going to go it's in the slides you know
i was actually planning on going here
this was getting us some useful stuff
where
not that one this one
tracking where we've been but if we move
off this grid our position row
and our position coordinates our
coordinates can actually get
off the map so once we've gone off the
map there's no way for us to mark on the
map
where we've been i can't put a 1 there
because i've gone off the edge
of the array there so i've tried to mark
a 1
in this array position here but that
array position doesn't exist because
this is a 10 by 10 array
so i've started trying to write
information outside of my array
and my program said no you can't do that
you can't just go off your data
structure your
your two-dimensional array and start
writing information elsewhere someone
said
the tourists left the resort and got
murdered by the local wildlife
um an interesting thing about this is
historically something that someone did
was they made a snake game that did
exactly what we're doing now
it just walked around inside an array
setting zeros to ones
and um this was a really really old
school
compilers and operating systems that
didn't care if you went off this grid
like they were like oh you're just
writing to memory
and so this program went into memory and
it just
went through the ram of the computer
um setting zeros to ones and it was just
like you know he actually just let it
run
and it let it keep going and some it got
some of the funniest crashes i think the
funniest
thing that it did was it opened the cd
drive on the computer
and we don't really have cd drives
anymore nowadays we used to actually put
cds in our computers
and this thing managed to find itself
all the way through the operating system
without crashing it
into the point where there was a bit
that that you could turn on or off for
whether the
whether the physical drive would open or
not and it actually opened the drive
so it was this funny thing where i um
most of the time just crash the computer
immediately because it found its way
into the operating system and started
rewriting
what the operating system was trying to
use at the time so we have a problem
here
and luckily we're using dcc which is
much safer
than other compilers us get going out of
bounds like that
um immediately says okay we can't do
this this is a problem
um we're gonna fix that in a second
but before we go into the walking out of
the um
the map i want to actually at least
complete the
the game as it's supposed to be which is
if we move somewhere
where we've already been say if we see
this one
where we've already been we want to say
oh
this is bad the tourist is like this is
very boring
i've been here before this game is over
but before i do that i want to make this
easier for us to understand
so i'm gonna do two hash defines here
oops
so the cool thing i don't even know if
i'm going to use this other one
but it's nice to have it in case i'm
going to use it
instead of having magic numbers like
these ones and 0s in my code
if i have words like this in my code
it's actually a lot easier for me to
understand
why part of my code is doing what it's
doing because if you look at this
as opposed to the one i put the word
explored in there
this line of code suddenly becomes much
more readable to me
i'm saying i've got a position somewhere
in the map i'm setting that position to
explore
makes it very very easy for us to work
with now
so what i'm going to do is i'm going to
move
i'm going to print the map out
and then i guess this is a good place to
do this
i think after i print the map out i'm
going to do a check
so i'm going to say if
my current location check to see
if current location was
already explored
so if my current location which is the
map of my
row and my column
has already been explored
oh wait oh wait no no that's not good
that's not good i've already set that
oh no no i haven't i haven't i haven't
okay we've got to think about the timing
when we start the loop we look at the
position we're in we set it to explored
and then in the loop we move somewhere
else so wherever i'm moving now i have
not set it to explored yet because this
is the end of the loop not the start
of the next loop so i've already moved
out of that position
or i have done something bad and i've
ended up in the same place so if i if i
didn't move at all so i gave ink rate
input and didn't move at all
i'm going to trigger this condition
because i'll already have explored
the square that i'm in but if i move to
a new square i can now check if it's
explored here
and if it had been explored
i will say
i've already been here how boring
and the worst thing that we can do is
make the tourist life boring
and this will end the game here and
we're going to end the game here by
flipping our sentinel
loop saying you don't get to loop around
anymore that's it
how boring we've already been here so
this will end
loop here um well not in the loop here
it'll
go back to the start of the loop and
then it won't run again so it's not it's
not entering in
in this specific position we're keeping
the flow of the program we know what's
happening
um okay so hopefully now
we're in a situation we still haven't
worked out the walking out of bounds
but we have a situation where if i visit
somewhere where i've already been
my tourists should spit the dummy at
this point
and then stop exploring so let's try
running this
so what we did before was we're tracking
where we've been and now we're going to
see
if we revisit somewhere the tourist is
not going to be happy with this
okay let's compile this
we are still in this small civilized
area where everything outside of it is
carnivorous jungle
so if we do walk off the edge of this
thing the whole thing is going to crash
but
we'll fix that in a second if we get
time which we might
so i'm walking upwards i'm walking to
the left
i'm walking down and then i'm walking to
the
to the right and we go ah
we went back over our path where we'd
been before and the tourist says i've
already been here
how boring so what we're able to do
now is we're able to set
positions on the map as we walk past
them
oh sorry this is the set positions on
the map
as as we every time we every turn we
start in a location
and we say okay we've now been in this
location and then
after we move we check the new location
we've just gone into we go have we
already been here or not
so we're looking at the ability to write
data
into this two-dimensional grid and also
check
if something has already got that data
in the grid so we're getting a lot of
kind of
um ability to work
with the positions in this grid and
change their values
so if for example i wanted to
put stones in a square grid
for something called slide i could use
code like this
to set certain positions in this
to certain hash defines that i have
if for perchance i don't know maybe i
wanted to do that
to get marks in an assignment
anyway so strangely enough what i'm
teaching you is useful for what i'm
assessing you on so if you're
if you're listening and you're
understanding this then you will be able
to get started on the assignment
if you don't understand it yet there's
plenty more of this kind of stuff
that's going to be in next week's uh
tutorials and labs which should help you
as well
um okay so we've got this this is our
game
reasonably working like the the
we're tracking where we've been and we
have our lose condition which is like if
we
if we go where we've been before we stop
but we've still got that
potential issue where
if i walk off the edge of the map i have
caused a great deal of issues
um and i don't want my game to end with
this
so i'm okay with the
um the game ending on
me making a mistake and something and it
ends correctly where it says okay
you have where was it
you have failed the game ends but i
don't
want my game to end in this kind of
crash and i think if anyone here plays a
lot of games
you'll know that anytime a game crashes
like this it's a really sad moment it's
like oh when was my last save point
or something or i was in the middle of
something and like if the game was going
to fail for any reason i would have
preferred to actually know about it
so instead of having it just crash like
that
let us look at the possibility of
checking if we've gone off the map and
if we have
sorry not not supposed to react too much
to comments in chat
but it was like cyberpunk 27 7.
i did manage to finish that game
eventually after all the crashes but
um then i just promptly deleted it i was
like i'm done with you
okay so
oh that's a cool one someone said moving
off the edge should print out so long
and thanks for all the fish
or fell off the world or something we
could do that but i want to do this a
little bit programmatically
where what i'm going to do is i'm going
to say if someone tries to go off the
map
i'm gonna put a fence around the map so
if you walk into the fence you just
don't go anywhere
so there's several different ways we can
go off the map
and if we look at our map here there's
four different directions we can leave
via
so either the rows goes below
zero that's me going off the top the
columns goes above the three
that's off this side the rows goes above
three that's off the bottom
columns goes below zero we go off the
left so there's four different
situations where we can leave the map
so let's do some if statements for these
so if i said off the top of the map
if my position row is less than zero
this is the top of the map
else if let's do the same coordinate if
this
is greater or equal to
the size of the map which is the number
of rows
we've got a define for that so that
should make that easy
that's the bottom
[Music]
and then we've got left and right
the position columns is less than zero
is the left i'm just doing this off
memory
up here so less than zero is the left
yes and greater than the size
greater than or equal to the size
because this is size 4 is off the right
greater than equal to the number of
columns just checking my time there i
think we've got enough time to do this
this is okay
so if we've gone off the map in either
of these
in any of these directions we want to
correct um where we're going
so i've actually shown you a technique
we can use
to make sure something stays within the
boundaries of something
but doesn't actually get pushed to a
random location it'll just stay
in the kind of location it's in
someone's just like wait this is just
bootleg snake it is just been like snake
it is exactly bootleg snake
okay so if we go off the top it means
that our position
r is incorrect so if i've tried to go
beyond zero
off the top of this map here what if i
want to put a fence
here so if i want to put a fence
across this what i can say is if you try
to cross this fence you just don't go
anywhere you're going to end up in the
same space
you're in so i need to say that if you
tried to make 0 into negative 1
you're going to end up at the same space
you're at which is at zero so let's do
that
so off the top
position r tried to go to negative one
so try to go less than zero
you're just going to go back to zero so
if you
tried walking off the top here you just
get placed exactly where you were
and so this is good because i don't want
you to get teleported somewhere
i could do the thing where you wrap
around to the bottom um but it doesn't
kind of make sense for the examples like
how is the user how is their tourist
teleporting right
and so off this side you end up there
off this side you end up there
and off the bottom you end up where you
were some people may remember this
because all i'm doing here is doing the
same clamping thing that i did
for the dice as one of the possible ways
to correct
the dice so
if position r tries to get to or greater
than the size
it must become equal to
the size -1 which is the final index
that i can use
in an array is the size minus one index
so
this puts it back inside the array and
again with the zero
if i try to get below zero leaving the
array i'm going to be at 0
and then if i tried to go
to the size or higher off the index
of the columns
then i do minus one off the size so then
i am as you can see this is size four
and three my three is four minus one
that puts us back
inside the grid
the interesting thing that's going to
happen here is you're instantly going to
lose the game if you try to do this
right because if you try to go off the
grid you're going to end up exactly
where you were beforehand
which means it's going to say i've
already been here so it's kind of like
as we said someone said we're making
bootleg snake
um it kind of makes sense because if you
hit the walls
in that game you also lose the game so
we're in a similar kind of thing i may
end up renaming this
um renaming this example to snake
actually because it really is
snake at the moment okay
so this clamping thing
is now going to i should actually say
that we're clapping here
clamp to legal map
positions now if we run this hopefully
we're not going to get any crashes like
this
and instead if i try to walk off the
edge i am going to lose the game
but at least i'm not going to get a
crash from it so
oops i tapped in five
by accident so i didn't move anywhere
and it ended the game
let's try that again okay so six
we can go up we can go left let's go off
the edge of the left
oh see my tourist did not move stayed in
the same position because i tried to
move off the left
edge of the map and it says we've
already been here how boring
okay i've hit 1pm so
the lecture is finished there but that's
all the code that i wanted to show
today so i've done explored okay
so and we've done this we've tried this
we've moved around a bit and we've seen
that we go off the map
and so we've done the clamping thing
there okay so
that's where we're at we've been able to
in this lecture we've been able to
navigate a two-dimensional grid we've
been
able to change the values in a
two-dimensional grid
we've also been able to check for values
in this two-dimensional grid
so here's a mini challenge if people are
interested in doing this there's also a
maxi challenge which is worth real marks
which is this thing called slide
which is the first assignment which uses
the same kind of two-dimensional grid
but if you want a little challenge
i have an idea about scoring is could we
give the player a score based
on how many places they visited before
they eventually either tried to walk off
the map
or went where they were before like are
there ways of calculating the number of
places they've been
um there's two ways i can think of doing
this but i'm not going to say because
it's a challenge
and so how would you want to calculate
how many
of the spaces in the grid were explored
and the other thing which i've been
dropping hints about the whole the whole
lecture today is yes
some of this code might be very very
useful in the first assignment
okay so i'm going to wrap it up there
that'll be the end of the
um the official lecture here but i'll
come back afterwards
for questions also reminder from michael
it is in the lecture section on the
website
there will be a live stream on thursday
which is just talking about the
assignment
um it's optional it's not necessary if
you think you have a full understanding
of the assignment
and you don't you don't need to hear any
more about it then don't worry you don't
need to go to that one
but if you if you want to you can always
come along i've said it at a time where
there's minimal number of clashes
because i can see everyone's timetables
and this has a minimal number of clashes
but there are some clashes so either way
it's going to be recorded
if people want to watch it later um
friday's lecture we're going to continue
um delving into c and we're going to be
looking at
actual memory and how we use memory
itself i haven't put that up on the
website yet because i haven't prepped it
but
it'll go up soon alrighty thank you all
um i will go into my be right back
screen and i'll come back in a second
and answer any questions go back over
code
explain things and stuff like that if
people are interested
alrighty we're back um lots of questions
there about the assignment
uh yes we're gonna i was keeping the
assignment stuff out of the
um out of the lecture i mean like i
wrote a whole lot of code that's useful
for the assignment but that's code
that's useful to know
in general um but in terms of really
specific stuff about the assignment i'm
saving that
for thursday i want to keep the
information kind of separate so that if
people want
assignment specifics they can go to one
place to look at it they want like all
the theory they need to know
they can they can come here and um and
kind of watch that stuff
so i'm trying to just keep those two
separate a little bit not that i'm not
gonna answer your questions and i think
the questions are being answered
in chat anyway but um uh trying to at
least make it easier after the fact for
people to look for information
and also if you're doing your um your
study
for the course uh for the exam at the
end you know that you can skip the
assignment streams then
um cactus tnt that's your real name
isn't it
it's asking how long the assignments
live stream will be will probably
be uh two hours i would say so it'll be
like the friday four to six pm thing um
lorenzo's asking have we officially
learned about what control d
does or not you i mean sort of
in that i showed it a bit today um but
it hasn't been
in any other content so basically
control d is your way of saying
to the computer that you are not giving
any more
input so this is the end of the input
so scanf can actually look for that in a
sense
it's not really looking for that but
it's looking for a lack of valid input
so um control d is like saying
this is a thing that doesn't match
anything in scanf so no matter what
symbols you put in scanf
ctrl d is always going to make scanf say
i did not read that
in a sense so it's like our way of
in the terminal saying we're finished
with giving you input
and we don't want to just like spam the
keyboard with invalid
input to to make it end we want to be
really specific and say okay
no more input now so that's what we're
using the control d for
uh brendan's saying would it be possible
to code an extra row and column for the
snake game and make it so the tourist
reaches the last rogue column it
refuses to let them move there or
teleport them back
you could if you want to okay let's
there's there's lots of little things
that you can do with this
so if you wanted to you could have um
the number of rows and columns and if
you wanted to you could put a buffer
around it so when we print the map
we could do something interesting
i mean i don't want to edit this code
too much
but we could start from a minus one
and go until equals the row columns
and then obviously we can't do this
because we'd be trying to access invalid
um array bounds but we could put a
border
around this thing that has some
different information so we could do
that in the printing
i'm going to set this back because i
don't want that to be
i don't want that to be the code that
people use afterwards
oh wait what is this i think that's in
here
no no in here in this one that was me
writing my comments to
to remind myself what i was doing which
is obviously no longer necessary because
it's already been completed
yeah so we could have a buffer around
the edge or we could even make it so
that this is the rows and columns
and we do this
so there's a buffer on either side and
then we can say all right
in order to do that we're going to need
some offset for the positions to make it
work and stuff like that but then we can
say
if you ever cross over into those buffer
regions on either side as in
if you hit in so this
check here instead of it being less than
zero it would be less than equal to zero
and this would be greater than or equal
to n rows minus one
we would have this larger grid where
we'd have this buffer
buffer of squares on the outside edges
of the grid we could do something with
that
right so there's a lot of little
manipulation you can do where this is
the official size but you can go all
right
there's a buffer on the outside and then
we can say when we print out that buffer
if we're outside of these not these if
we're outside of this
outside the map we can print something
different so we can have like just
x's around the outside and so that would
kind of
it's nearly like us putting a border on
the map we could totally do that
so play around with it because you can
you can take what i've got here
and then just just run with it you know
like there's a lot more
um there's a lot more possibilities
because this is only one hour of coding
for me you could spend weeks on
something just like this and
make a simulation of a side-scrolling
arcade shoot-em-up
maybe i don't know so i always laugh
when i'm doing it because
this um this exact example that i did
here
was actually one of the candidate ideas
for the first assignment
um it's not complicated enough and there
wasn't enough other stuff to do
but you could see how i could do this as
the first assignment and say you've got
to walk around
and then if you hit certain squares it
changes something else
in the same way that if you've looked at
the assignment if we shoot certain
things
with laser it changes more in the grid
than just the cell that it's in
and stuff like that so um you could see
how i could definitely take
this tourist or snake game as you'd call
it and turn this into
um into an assignment of the same
difficulty level as
as slide if you've looked at slide that
much so far
um so lorenzo's asking where else can we
use control d so control d
is going to basically like if you want
to look at the details control d is
going to send a signal to
the program if the program is accepting
input it's going to send a signal to the
program
called eof eof is actually a hash
defined
i think is it's definitely in standard
input output it might be also defined
in the standard library i know there's
several of the
the important hash defines are in
multiple of the c standard libraries
um it's funny if you look at the c
standard libraries they have a whole
chain of other things that they include
which is the back end of c and so a lot
of them will include the same things
so that that symbol eof it actually
looks
this you can i think if you want to
i think you can even do stuff like this
you can set it to an integer i can't
remember if it is actually a
specific value or it's different values
depending on your operating system and
things like that
but often i think eof is often negative
one
but i have no guarantees on that i tend
to use it as a symbol and not think
about what number it is
um but yeah that's the
symbol that will get sent through to
your scanf
um then your scanf will say if i if i
receive that then i definitely did not
succeed in getting any input
um when we use other um
other types of input because scanf's not
the only input we're going to use
there's actually other things we need to
use for different
purposes um
when we when we start using those we'll
actually start using eof a little bit
more
so yeah control d is just basically
saying there will be no more
input and there's a signal that goes
through and says that
um yeah so brendan was following on on
that i was like yeah extra rows and
columns that aren't visible
so yeah definitely because if we wanted
to right when we're printing this out we
choose
exactly what's going to be printed out
so we said start at zero and go to that
so this was definitely printing out
everything that's in this array
but you know as you can see we can
construct the array in different way
ways or we can say we're not even going
to show you all of the rows so
i can start from row 5 and column 5 and
go look at that you can only see
the the the bottom right quarter of this
map and hopefully you can still navigate
without that
i mean obviously that doesn't make sense
for the game that we made but like
other games might do that so another
game might have this this concept of the
fog of war where you can only see bits
where you've been
before and other parts of the map are
actually greyed out or they're covered
up with a different symbol or something
like that
you could do some cool stuff like that
you could turn this into a two-player
game
where each player sees a different theme
you'd have to both have access to the
same bit of memory
which is okay we're getting way beyond
one five one one but yeah you could do
that kind of thing as well
um uh so
lorenzo was asking is there a way to
have an expression that some variable
is equal to or not equal to a set of
numbers saying
x not equal to 2 4 6 or 8. there isn't
necessarily an
expression for that but it's definitely
a function for that
so i could do something like um
check input and i could have this
function
and i'd write this function here which
says
um
um actually there is an expression that
would do this easier than what i'm doing
but anyway
because i'm about to do it now if input
is equal to
2 or
input is equal to four
[Music]
or input is equal to six
or input is equal to hey that's the
expression actually
there it's a bit chunky though
result is equal to one so this is saying
if it's any of these four a true then
the result is equal to one
then we return the result
this is actually a really nice kind of
thing because we can take all of this
and go all you need to do is run this
run this function and you don't have to
do all of this especially if
if we start to add heaps of um
heaps of extra possible inputs like say
there's like 20 keys
that do something then this just using
the phrase check input is much nicer
than putting this massive or statement
uh in here
yeah inside here to check if it was the
correct input or not
so yeah we could do something like this
if we wanted to i'll leave this out
because i think this might be just a bit
confusing to have this
there but yeah you could totally do
something like that
these are the things that you can see
like my instinct was if you want to
check input i want to push this out into
a function
because i know it's going to be code
that doesn't that just kind of messes
things up it just adds more information
more noise inside what is already quite
a noisy
while loop so a lot of this stuff i
would um
i would try to change somewhere so the
downside is this bit here
i really want to push this into a
function but
it wants to change multiple possible
variables
and the function can only give you back
one result so
i am going to teach you later how you
can change multiple variables in a
function
but for now we couldn't do that so i
nearly wanted to push that out
this one you totally could oh no same
thing it's changing multiple variables
yeah so it's hard i guess we could do a
clamping function that has
the zero the n rows and the position
and it'll clamp either one of them and
you'd run one for each of these
coordinates
but again then we're nearly doing as
much work as
just writing it here so the
there's always difficulties for deciding
what goes into a function or not
because i think what we ended up with
here we couldn't really put much of this
into a function
the print map obviously
which takes a lot of this out of it
which is nice
okay um
zac is saying why do we only learn while
loops and not for loops
the the reason for that is basically
that um
they both do the same thing so when
we're trying to teach people about
programming
we just pick one that's going to work
and while loops
work much better than four loops when
you're just learning about programming
you haven't used any of them before
because what they do is you have to do
the setup
in a um in a variable declaration so if
you want a variable you have to declare
it the same way you declare other
variables
the for loop does it in a weird way
right because it's inside
the the brackets there if anyone's
wondering about this
there's another type of loop
called a for loop which might go like
this
so this for loop does the same thing
as this while loop the only difference
is it does everything inside this
expression here so this is the thing
it's testing
this is the thing it's doing at the very
last line which this one doesn't
actually do at the very last line so we
wouldn't be able to do this thing enough
in a for loop
um and this is the variable that it
creates for its use
so a lot of people like to use these
because you have to do everything in the
brackets
so you're less likely to leave this bit
out by accident but it can't actually do
what we're doing here in this one
because we did a printf
after this uh incrementing of the um
uh of the variable and this is the test
to see whether it runs again um the only
annoying thing about this is like you've
just got to remember
how to do all these bits and pieces
whereas this you set up a variable the
same way you set up a variable
the while loop layout is exactly the
same as an if statement so if you
learn the if statement you can learn the
while loop really easily
this incrementation always happens
basically at
the closing bracket so you can't do any
things like
um something after the iteration
although this could have gone before
after the iteration it would have made a
difference
i'm not sure why i did it afterwards but
anyway yeah
so what for loops are a tiny bit less
flexible than a while loop
and also the in terms of learning
c syntax you just have to learn like a
new sentence structure here
whereas while loops are exactly in
the same programming structure that
we're teaching with all the if
statements and everything else like that
it's the same reason why we're not using
switch statements in this course because
they're completely different syntax to
all the other c
and there's no point right there's no
point learning multiple different
syntaxes to just do the same thing
so this is why while loops instead of
four loops for those of you who know
four loops
if you don't know four loops you can
safely ignore them for now
and you'll get into these later because
after you're good with while loops for
loops are easy
to use but if you're trying to learn
things from scratch it's better to learn
while loops than for loops because their
layout syntax and formatting
is exactly the same as any other bits of
code whereas for loops is like okay this
is special and different
and then you end up having to learn
something else so it's like
if i want to reduce the number of things
i have to teach
i use the while loops instead of the for
loops that's why i didn't
i don't know if you expected that
question to go into like that much
detail but that's that's how it all
works
so it's very much like it's interesting
because like you know if you've done
other programming you may know for loops
and then you're like oh okay so there's
there's all of this kind of stuff that
um that that i guess
you could know if you learn programming
in a different way
but there's always things where it's
like behind these subtle things that
make the initial learning curve easier
and so that's why the course is
engineered in this way
so there's a whole lot of specific stuff
that um
if i was teaching a course to teach you
how to program in c
um then i would teach c but this is a
course that's teaching you how to
program
that happens to use c so that's why i'm
cutting off
parts of c that are going to be
unnecessarily confusing
so that you can just learn about
programming instead so
hopefully that that answers that's
a longer answer than maybe you needed
but yeah that's that's
this this question's obviously gone
through my head a lot
right it was like oh there's all these
other things i could have taught you
know there's all these other things i
could add in
but i need to i need to get this as
like you know one of the goals of one
five one one you can see that one of the
goals of one five one one is to push
challenge and get people doing
interesting things but that's not
actually the main
one of the bigger goals of one five one
one is accessibility if this is the
first programming course that people do
it has to be
something that people with no
programming capability can come in and
by the end of it be programmers
um so a lot of these things are like
if i if i show you eight different roads
that can reach a destination
um then you could pick one at random and
it could be really hard but if i only
show you one road
and it's the same kind of road that
you've gone on for these other things
then it's going to be easier to get
there and then afterwards you can look
at the other roads and go oh okay
now i understand them because i took
this one which was the cleanest path
to get somewhere anyway
yeah so lorenzo's got a really funny
thing there it's very very subtle
learning how to program in c versus
learning how to program
comma in c yeah so i mean this is the
kind of thing where i'm trying to um
i'm trying to teach you things that will
last longer than c because i i know
c has been around longer than most of
our lifetimes even mine
um i'm not that old but you know i am
still not as old as c
um heaps of the other lecture is
actually older than c
and for them this is like second nature
all programming languages
are ephemeral every single programming
language we're using
at some point is going to be removed
from the set of programming languages
that are used
generally and so we need to always be
able to jump between programming
languages so that's why
the focus on the language can never be
as strong as the focus on
being able to code in general
um
nyanda is asking i don't know if i
pronounce that right sorry
um when is my birthday um
it's it's later in the year it's in the
second half of the year so you probably
won't be
in in courses with me when my birthday
is i'm not gonna say my birthday because
like
i know enough about cyber security to
not uh not give any details that could
be security questions
for me out okay okay
so uh any other questions
oh important question back there ryan
was asking where do i get assignment
help
um good places to get assignment help
talk to your tutor so you can talk to
your tutor in your labs
if you're an online you can go into a
breakout room and it's safe
to kind of show your tutor your code
like that um help sessions have now
ramped up
for assignment help so that was in the
notice that i sent on monday
the first notice because there were two
there was one the one that had all the
information for the week and the other
one was like bang assignment is here
um the first one has a link to help
sessions you can get one-on-one help
with one five one one tutors there
so you can bring your assignment in
there and go look i'm doing this thing
and it's not working
um can you look at it if you want to ask
on the forums
forums you can ask about generic topics
so you can ask about
looping through part of a 2d array or
something like that
but once you start asking oh in that
case
how about i do this specifically within
the assignment context
then that will probably get deleted off
the forums to make sure that
um we don't have a partial assignment
solution on the forums or something like
that you know
so forums good for open questions
theoretical questions and stuff like
that
um in your labs and help sessions
one-on-ones with your tutors
to talk about things um a lot of the
time your tutor is going to initiate
one-on-one conversations with you
so every time every time we're doing the
reflection marking that's actually an
opportunity for you to talk to your
tutor
most of the times when you tutors having
that conversation they may ask you if
you have any questions or anything like
that
and you may be able to then at that
point go there's a particular technique
in the um uh in the assignment that i'm
not sure of
and you tune up and go that's
interesting right we can actually go
through that
and either they'll go through that with
you then and there or they'll say
let's um let's set a time because you're
not the only one that needs this
help and i'll go through it with a group
of people you know like little things
like that
so um your tutors often first port of
call
because they're the person that's going
to know who you are and i apologize
because i know some names some names go
past here
but i there's there's over 900 of you
so the chances of me meeting individuals
is actually very low
so um they know you and where you're up
to and what you've had trouble with
before
in labs and stuff this is what the
reflection's about really so it's it's
about
getting the tutors to know who each and
every one of you are
and so they've read some stuff that
you've written and things and they're
able to say okay this is where i think
this person's up to
and then i can give them the appropriate
amount of help for these things
so hopefully you like that um
sorry i just get to the point where
people are asking things uh
bl autumnal blake asking there's no
point using switch
and then word edition word edition is a
specific exercise
to kind of teach you
the context for which we're going to use
arrays and looping
and stuff so it was made to show you
like how what we taught you up into that
point was not sufficient
for the majority of the programming
things that you might want to do that's
why it's a challenge exercise and not a
core exercise
because just having to copy paste or
re-type out that much code it's not
something that we consider to be core
for the course but if people are looking
at this is why a lot of the challenges
exist
people looking at the ramifications of
coding the way we are at the moment
or the code that we have existing in a
certain context
we can see why other features are added
to c later
so anyone who did word edition was
really frustrated by it
go back and do it now with loops and
arrays should be really easy
there should be a way of doing it that
is
significantly easier than what was done
before but
i leave that with you as a challenge
actually i should put that in
as an actual exercise or a challenge
exercise in
say this week or next week's labs i
haven't apologize but it's a cool idea
to go all right if anyone did this word
edition before do it now
it's like people were like trying to get
this thing under 100 lines of code
and stuff like that i think now it would
be like 15 lines of code approximately
to do it
actually not yet not yet you need
you need more i need to teach you more
before we need to be able to use letters
and stuff so when we get to characters
and strings then word edition will
actually be really easy
but not yet soon though um
okay uh question there alan was asking
is printmap a function
yes this is a function here so this is
the code that runs
when the function runs this
here is what we would call the function
definition or function prototype
unfortunately there's lots and lots of
different words people use for the same
things because programming
is something that just sort of evolved
and it's not super clearly defined
this is the thing that tells your main
that the function exists
and it takes an array a 2d array and two
integers
as input and that way now we can use the
function here
give it a 2d array and two integers as
an input and a run
i think we use it again here
i'm going to enter there because they're
different things yeah
so this is us sort of actively using
functions now so we set up
the knowledge of the function so that
the main can use it
then in the main every time we use it we
just call its name
and then every time my computer as it's
running sees this
name like this it'll jump to this part
of the code
set up these inside this curly brackets
and start to use them
it's actually one interesting thing i
might talk about it later is that
this here you can actually edit
this map through that and there's some
really subtle things about why that's
working
and stuff but i'll talk about that later
when we know about memory
so
[Music]
oh lorenzo's saying it's it's it's
amazing that c is still being used after
it's 40 years old
well i mean it's kind of interesting
because c is 40 years old but parts of c
are much younger than that and so heaps
of stuff like the c
standard library is like in active
development in a sense it's still being
updated
[Laughter]
she's as old as your mother okay um
ooh evan says there might be
an error in the tnt example for the
assignment oops
something just fell off my shelf um if
you find an error please
send us information about that error
because
there's actually a a nearly impossible
to get achievement which is like
i think i think it's an achievement i'll
take a check with tom but i think there
might actually be an achievement where
um if you find an error in the
assignment you can get an achievement
and that's one of those achievements
that not everyone will be able to get
because once we've once we've cleared up
any errors that we have in the
assignment
um then that one will be unachievable i
think
so if you do send us that i don't know
whether that's actually an achievement
or not
we may actually be making it so that
everyone has
the technical possibility of 100
percenting the achievements
because some people are trying to do
that but i do i remember seeing someone
post on the forums that there was an
error somewhere
and um i knew that that happened really
late last night so i only read it this
morning
but that's going to get fixed at some
point i think if i remember correctly i
don't know if it's the same error
the reference solution for the
assignment
is correct um but the way that we've
written it in the spec
needs to be updated so we'll probably do
that so
dave you've hit the day zero patch it's
not even day zero so it's a few days in
this is this is like the the version 1.1
it's like there's the version 1.1 and
then we're releasing the dlc which is
the
the extension content um that's probably
going to come out
i think it'll come out before the live
stream so that we can talk in the live
stream
um talk about it in the live stream
um autonomous blake's asking you about
getting help from people outside unsw
if you do get help from people outside
unsw
if you've got like a tutor or something
like that
um just be careful because like if you
talk to someone who is a
an experienced programmer they could
solve the entire assignment for you
and then that ends up being a plagiarism
issue um and also you don't learn
anything if someone else does it for you
right so if you are going to use
anything from outside unsw
um make sure you credit it so i mean
like people have done that before i've
had people in assignments say
i did this cool extra thing that wasn't
actually
the way it was intended but i did this
on top of the way that it was intended
and i got this
idea from this thing off stack overflow
and stuff so it's just in their comments
in the assignment going here's the link
to the place where i got this from
these are the bits that i use but these
are the bits that i modified
and stuff if you just explain it things
will be okay i mean
if it's like here i downloaded the
entire assignment from this other person
and i've credited it
then we might go okay so because this
isn't necessarily all your work we have
to modify your marks a bit
to reflect it but we're not going to
like throw you to the wolves because
you've credited things correctly so if
you credit it correctly then it's not
plagiarism
um but then we'll still decide how many
how much how much marks you're going to
get based on how much help you got
i mean heaps of stuff that you're going
to look at which is just like
how do i work with a 2d array you know
there's heaps of stuff online
about that so you will definitely be you
know googling things and stuff like that
that is how we program
um but if you're going to use code or
techniques that other people
have um have publicized then you do need
to give them credit for it
so there's those are like the the kind
of the subtle details
about um how much you use from outside
versus how much you write yourself
oh zach is asking about um it's not on
the style page but are there any style
tips for indentation of comments
um my tip for indentation of comments is
they should be indented the same
as the code that they're in so
if this is inside of curly brackets then
it's indented
we shouldn't necessarily be
non-indenting comments
like this the only time i would not
indent comments
is if i was doing something that i
really wanted to split
sections so sometimes i will separate my
code into like
chapters in a sense and i'll do these
big blocks and things it's not even
necessary
some people code without ever using
these some people put these things in
everything um so some people with these
header comments here
will
do this kind of thing
i don't know if that lines up
and and the rest it's going to take me
ages to do it but they're
saying they put a whole box around
things so those ones
in a sense don't need to be indented
because they've got their own
massive slightly over engineered
um information there but
these these ones
especially if they're referring to a
line should always be indented
to the line they're referring to and if
they're inside curly brackets
they should maintain that indentation
because if i did something like this
this is super confusing right because
then everyone's going to think the while
loop ends here because the indentation's
gone back out
so we do need to remember that the
indentation is how we as humans
track whether we're inside or whether
we're leaving or inside curly brackets
so if the comments suggest that we may
have left the curly brackets it's going
to confuse people
so we keep it at the same level
okay i should wrap this up soon
yeah and blake was saying that like
we're talking about the um the word
edition thing
there that yeah if we have arrays of
things called strings which i'll teach
you later then word edition gets very
easy
brendan vs code superior vs code is
um is a very useful code editor i use it
for a lot of other things
um when we're again this is the same
thing as like one five one one when
we're talking about for loops and we're
talking about
um switch statements and stuff like that
not like i haven't used all of those
in professional programming but um
when we want the easiest path in um g
edit is a very nice
easy path in because it doesn't have all
the bells and whistles that something
like vs code has because
the more features something has the more
stuff it has to confuse people who have
never seen
things like this before i have actually
taught beginner programming courses
where we started
in vs code and a lot of it is just kind
of like
please ignore three quarters of this
program
and we're only going to use this bit and
i will slowly teach you about these
other parts
which is why i like something like g
edit because like everything that does
like cut copy paste and stuff are things
that people seen before
the only things it adds is like line
numbers
and syntax highlighting and stuff so
it's kind of like
you know the same like that yes blake is
saying opening photoshop for the first
time
so i had friends who taught that because
i used to teach in computer game stuff
and so
they would teach maya and photoshop to
beginners
i always laughed when they did that
because i'm just like what do you what
do you do how do you try do you try to
hide
like the eighteen thousand buttons that
are in these programs and it's like no
we can't because we can't change the
layout
we have to give them the default layout
and teach them with that do we have to
just
tell them not to look at things it's
like ah that's tough
okay
ooh m stefner
is saying that your code output was
wrong according to autotest
but it was exactly the same as the
reference slide file
that's something to send through to us
definitely because that might mean that
our auto tests are not up to date
to the reference so that could be a bug
because our order tests a lot of those
are handwritten
and so someone could have just made a
typo in the auto test
for what it's checking um a lot of the
time when we create the auto tests we
will actually go
run it in the reference solution then
copy paste the reference solution to be
like okay
this is what the people should be doing
um but obviously
mistakes can be made there so evan said
they've made a post about that
um yeah
blake had to teach the u9 teacher
photoshop i guess it depends
because there's not um like in terms of
your high school teachers there's not
necessarily a reason why they would have
to know photoshop
okay looks like i've caught up with chat
now and there's no more questions we've
gone through the code
looked a lot of different things here so
um
i will wrap up the stream here and i
will see whoever's coming
to look at the assignment uh tomorrow at
four
i'm going to have tom in with us tom the
subject admin
um because he's been doing a lot of the
editing of the nitty gritty for the
assignments when i talk about the
you know the wide ideas what's in the
assignment he's going to say
it's actually built like this and stuff
and so we'll bounce back and forth on
those things
um so see some of you tomorrow
and um everyone else i'll see you on
friday for our normal lecture 4 to 6 pm
see you later
